swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "booking"
  description: "Access to Petstore orders"
- name: "checkIn"
  description: "Access to Petstore orders"
- name: "checkOut"
  description: "Access to Petstore orders"
- name: "statistic"
  description: "Access to Petstore orders"
paths:
  /booking:
    get:
      tags:
      - "booking"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getBooking"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Booking'
      security:
      - api_key: []
    put:
      tags:
      - "booking"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "putBooking"
      produces:
      - "application/json"
      reqestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Booking'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
  /booking/{idBooking}:
    put:
      tags:
      - "booking"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updateBooking"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "booking"
      summary: "Deletes a pet"
      description: ""
      operationId: "deleteBooking"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /checkIn:
    get:
      tags:
      - "checkIn"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getCheckIn"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
    put:
      tags:
      - "checkIn"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "putCheckIn"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
  /checkIn/{idCheckIn}:
    put:
      tags:
      - "checkIn"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "updateCheckIn"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
  /checkOut:
    put:
      tags:
      - "checkOut"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "putCheckOut"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
  /statistic/getRooms?dateFrom={dateFrom}&dateTo={dateTo}&type={type}}:
    get:
      tags:
      - "statistic"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getStatistic"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Booking:
    type: "Booking"
    properties:
      from:
        type: "string"
      to:
        type: "string"
      guest:
        type: "integer"
      room:
       type: "integer"
    xml:
      name: "Booking"
  CheckOut:
    type: "CheckOut"
    properties:
      id:
        type: "integer"
      to:
        type: "string"
    xml:
      name: "CheckOut"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
